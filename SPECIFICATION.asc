= OpenCompose Specification

# WIP : This document is under heavy modification.

:toc:


# Introduction

This document lists and describes elements of the proposed filespec for a standardised orchestration file format aimed at developers. Operations folks can take the same specfile and deploy their microservices on their orchestration platform. This document tries to identify mappings to existing orchestratoin platforms.

A primary goal of OpenCompose is to be inclusive and flexible enough to work with existing platforms and future ones as well.

.File Format
|===
||Description| Value| Note

|*File name*|The name of the file created by a developer that follows this specification|<services.yml>|This name is to be confirmed. We are
currently using a placeholder (services)
|*File Format*|The format of the file created by the developer that follows this specification|YAML|
See http://yaml.org/ for a full specification of the yaml format
|*Version*|The version of this specification.|0.2|This is currently a pre-alpha proposal and under heavy development

|===


# Element Structure


----
version: "0.2"
services:
  <Service Name>:
    type: <internal | external>
    image: <Image Name>
    container_name: <Name of Container>
    command:
      - <Executable>
      - <Optional Args>
      - <Optional Args>
      - ...
    environment:
      <Key:Value>
      <Key:Value>
    ports:
       - <Port>
       - <Host:Container>
       - <Protocol:Host:Container>
       - <Protocol::Container>
    volumes:
       - <Volume Name:Container Path>
       - <Container Path>
volumes:
  VolumeName:
    size: <Size Of Volume>
    mode: <ReadOnlyMany | ReadWriteOnce | ReadWriteMany>
----


# Detailed Element Specification

#### version
Version of the specification used.

This directive is mandatory.
----
version: "0.1"
----


#### services
`services` is the main directive and is mandatory with one or more services defined.
----
version: "0.1"
services:
  web:
    ...
  db:
    ...
----


#### type
Depending on how a service needs to be exposed a `type` can be specified in the service definition. The type can be set to `external` or `internal`. The orchestration platform can implement the details. For e.g `external` can translate to `LoadBalancer` in Kubernetes and `internal` can translate to `ClusterIP`.

----
version: "0.2"

services:
  web:
    type: "external"
  redis:
    type: "internal"
----


#### image
The image from which the container will start. Needs to be a valid image.

----
image: awesome-micro-service:v1

image: nginx
----


#### container_name
Specify a custom container name, rather than a generated default name. This name should be unique within a namespace or else will result in error.
----
container_name: app-container
----


#### command
Command to override the default command baked into the container. OpenCompose expects complete command (executable and the optional args) to be specified in a list format.
----
  command:
    - python
    - setup.py
    - register
----


#### environment
List of environment variables to be set in container.
----
environment:
  S3_BUCKET: SOME_S3_BUCKET
  API_KEY: XYZABCDE123
  API_SECRET: SFZV3EYT89
  DATABASE_URL: "postgres://SOME_URL"
----


#### ports
Expose ports. It should be list of exposed ports. By default protocol is TCP if not specified. To specify, UDP, prepend with `udp` <1>. The port should be defined in the following format <protocol>:<host/service>:<container>. When simple port is provided, the same port acts as containerport and hostport <2>.
----
ports:
  - tcp:4567:80
  - udp:5000:6000    // <1>
  - tcp:3308:3308

ports:
  - udp:4000:8999

ports:
  - 3000

ports:
  - 3306             // <2>
  - tcp:3306
  - udp:3306
  - 13306:3306
  - tcp:13306:3306
  - udp:13306:3306
----


#### volumes
Declare volumes used by this container service. The declaration can be done in two ways, as named volume and mount path inside container `VOLUME_NAME:MOUNT_PATH` <1>. The advantages of using named volume is that volume data remains persistent and can be shared with other services.

Another way is to define volumes is to specify only mount path inside container `MOUNT_PATH` <2>. These kind of volumes persists until contianer's lifetime.

----
volumes:
  - dataVolume:/var/data         // <1>
  - staticPages:/var/www/assets  // <1>
  - /tmp/tmpdata                 // <2>
----

When using named volumes define more information of the volume in root level directive called volumes. Inside each volume define `size` and `mode` of volume. Size is defined as number and unit Bytes(e.g. `1G` or `300Mi`, etc.). Mode is access type of the volume, viz. of three types, `ReadWriteOnce`, `ReadOnlyMany` and `ReadWriteMany`.

----
volumes:
  dataVolume:
    size: "1Gi"
    mode: ReadWriteMany
  staticPages:
    size: "5Gi"
    mode: ReadOnlyMany
----

Take a look at example below. Here in example see that volume `dataVolume` is being reused by two services. And extra information of these named volumes is defined in root level `volumes` directive.

----
version: "0.2"

services:
  frontend:
    image: frontend-app:v1.0.1
    volumes:
      - dataVolume:/var/data         # named volume persistent data
      - staticPages:/var/www/assets  # named volume can be reused

  backend:
    image: backend-app:v1.0.1
    volumes:
      - dataVolume:/app
      - /tmp/tmpdata                 # ephemeral, lasts until container's life

volumes:
  dataVolume:
    size: "1Gi"
    mode: ReadWriteMany
  staticPages:
    size: "5Gi"
    mode: ReadOnlyMany
----


# Open Issues

- *Allow the developer to express that containers should be colocated* In order to ensure the correct functioning of a service or ensure that it performs and is scalable that certain containers are co-located & co-scheduled. In pre-container terms, the processes would have executed on the same VM or bare metal. The developer needs a way to express the colocation of services. Docker compose does not provide this capability, instead requiring the use of filters in Swarm (see <https://docs.docker.com/swarm/scheduler/filter/>. Kubernetes uses pods to express colocation (see <http://kubernetes.io/docs/user-guide/pods/#what-is-a-pod>).
- *Allow the developer express minimum capabilities required to run* In order to ensure correct functioning of a service the developer may want to specify required/recommended capabilities (e.g. memory, CPU, disk space). For example, a Java process may require a minimum heap size. Docker Compose allows you to pass options through to the docker container for memory and CPU (see <https://docs.docker.com/compose/compose-file/#cpu-shares-cpu-quota-cpuset-domainname-hostname-ipc-mac-address-mem-limit-memswap-limit-privileged-read-only-restart-shm-size-stdin-open-tty-user-working-dir>. Kubernetes implements CPU and memory limits for pods (see <http://kubernetes.io/docs/admin/limitrange/> and resource quotas (see <http://kubernetes.io/docs/admin/resourcequota/>).
- *Allow specification file format innovation* In order to allow OpenCompose implementations and users to innovate we want to allow additional elements to be added to the file that an implementation may use to expose additional capabilities such as features not covered by open compose, new features proposed for a later revision of OpenCompose, or instructions passed to an extension model.
- *Allow the developer to express replication capabilities* A developer may wish to indicate that a container can be replicated 0 ... N times for horizontal scaling and still have the application correctly function. This should be specified.
- *Allow the developer or application delivery team to overlay additional elements* Different stages of the software development lifecycle may be handled by different people, or by the same person wearing different hats. In order to support this we should support an overlay model

