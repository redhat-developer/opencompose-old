= OpenCompose Specification

# WIP : This document is under heavy modification.

:toc:


# Introduction

This document lists and describes all elements of the proposed filespec for a standardised orchestration file format aimed at developers. It also identifies
mappings to existing orchestration platforms such as Docker Compose, Kubernetes/OpenShift and Apache Mesos Marathon.

A primary goal of OpenCompose is to be inclusive and flexible enough to work with existing platforms and future ones as well.

.File Format
|===
||Description| Value| Note

|*File name*|The name of the file created by a developer that follows this specification|<choreography.yaml>|This name is to be confirmed. We are
currently using a placeholder (choreography)
|*File Format*|The format of the file created by the developer that follows this specification|YAML|
See http://yaml.org/ for a full specification of the yaml format
|*Version*|The version of this specification.|0.1|This is currently a pre-alpha proposal and under heavy development

|===


# Element Structure


----
version: "0.1"
author:
  name: Uber Hacker
  email: developer@example.com
services:
  <service name>:
    container_name: <String>
    context: <Path>
    dockerfile: <Path>
    command: <String>
    entrypoint: <String>
    image: <String>
    extends:
      file: <Path>
      service: <Reference>
    depends_on:
      - <Service Reference>
      - <Service Reference>
    environment:
      - <Key=Value>
      - <Key=Value>
    env_file: <String>
    env_file:
       - <Path>
       - <Path>
    expose:
       - <Container>
    ports:
       - <Host:Container>
    labels:
       - <Label: Value>
    links:
       - <Reference>
       - <Reference>
    volumes:
       - <Host:Container>
    volumes_from:
       - <Service Reference>
----


# Detailed Element Specification

#### version
Version of the specification used.

This directive is mandatory.
----
version: "0.1"
----


#### author
Author of the compose file.
----
author:
  name: Uber Hacker
  email: developer@example.com
----


#### services
`services` is the main directive and is mandatory with one or more services defined.
----
version: "0.1"
services:
  web:
    ...
  db:
    ...
----


#### build
Builds a container image from given path or a context .

Either `build` or `image` directive has to exist in compose file or will result in error. If `image` directive is absent then a generated name is used for the image that gets built.
----
build: ./src

build:
  context: ./src
----


#### context
Path to  directory containing a Dockerfile or url to Git repository. `context` is used as a sub-option to build.
----
build:
  context: git://mysource/repo/project.git
----


#### dockerfile
Alternate Dockerfile used for building a container image. Dockerfile is used as sub-option to build.
----
build:
  dockerfile: Other-Dockerfile

build:
  context: ./src
  dockerfile: Other-Dockerfile
----


#### image
The image from which the container will start. Needs to be any valid image specified in repository/tag or partial image ids.

Either `build` or `image` directive has to exist in compose file or will result in error.

If the specified image is not found on the system and `build` directive is absent, then it will be pulled from image repository. If `build` directive is present, then a new iimage will be built and given the name and tags as specified by `image` directive.
----
image: awesome-micro-service:v1

image: nginx
----


#### command
Command to override the default command in the container. Optionally a list of arguments can be provided.
----
  command: python setup.py

  command:
    -python
    - setup.py
    - register
----


#### container_name
Specify a custom container name, rather than a generated default name. This name should be unique within a namespace or else will result in error.
----
container_name: app-container
----


#### depends_on
*TODO*
----
----


#### environment
List of environment variables to be set in container. Overrides values listed in `env_file`
----
environment:
  - S3_BUCKET: SOME_S3_BUCKET
  - API_KEY: XYZABCDE123
  - API_SECRET:SFZV3EYT89
  - DATABASE_URL="postgres://SOME_URL"
----


#### env_file
Add environment variables listed in the file. Variables listed in `environment` override values listed here.
----
env_file: .env

env_file:
  - ./s3_paths.env
  - /aws_keys.env
----


#### expose
*TODO*
----
----


#### extends
*TODO*
----
----


#### hostpid
Use the hostâ€™s pid namespace. Defaults to false.
----
hostpid: True
----


#### labels
Labels are annotations used to add meta data resources. Can be a list or dictionary.
----
labels:
  release: stable
  role: cache

labels:
  - production
  - rhel
----


#### net
*Not supported*

It does not make sense for any network specification to be a part of application specification.
Network specification should be part of the operation and infrastructure specification,
abstracted from the developers. The developers should only be concerned with the services
they depend on when designing their application spec, and the orchestration tool should
take care of deciding the best network configuration for the application when it's
run. In this way, we can have separation of concerns, and the same application spec
can run untweaked across multiple infrastructures.


#### ports
Expose ports. It can be a single port <1> or a list of exposed ports<2>. By default protocol is TCP. To specify, UDP, prepend with udp. The port should defined in the following format <protocol>:<host/service>:<container>. If no host/service port is provided then a random port will be chosen.
----
ports: tcp:3000:80 // <1>

ports:  // <2>
  - tcp:4567:80
  - udp:5000:6000
  - tcp:3308:3308

ports: upd:4000:8999

ports: 3000

ports: tcp::3000
----
<1> Single port
<2> List of ports


#### volumes
A list of paths or named volumes which will be mounted and can be shared by resources.

----
volumes:
  - datavolume: /var/data
  - staticpages: /var/www/assets
----

Volumes can optionally provide a unique `volumeId` to define a named volume. Each named volume can have `type` parameter that defines the type of volume and a `options` parameter.

----
volumes :
  volumeId:data
    type: ebs
    options:
      fsType: ext4
      imageID:fobaar
  volumeId: shared-nfs-data
    type: nfs
    options:
      server: 10.10.1.1
      path: "/"
----


#### volumes_from
*TODO*
----
----


#### entrypoint
Overrides the container's default entrypoint. Can be passed as a single entry or a list form.
----
entrypoint: /scripts/run.sh

entrypoint:
  - /bin/bash
  - -c
----

# Open Issues

- *Allow the developer to express that containers should be colocated* In order to ensure the correct functioning of a service or ensure that it performs and is scalable that certain containers are co-located & co-scheduled. In pre-container terms, the processes would have executed on the same VM or bare metal. The developer needs a way to express the colocation of services. Docker compose does not provide this capability, instead requiring the use of filters in Swarm (see <https://docs.docker.com/swarm/scheduler/filter/>. Kubernetes uses pods to express colocation (see <http://kubernetes.io/docs/user-guide/pods/#what-is-a-pod>). 
- *Allow the developer express minimum capabilities required to run* In order to ensure correct functioning of a service the developer may want to specify required/recommended capabilities (e.g. memory, CPU, disk space). For example, a Java process may require a minimum heap size. Docker Compose allows you to pass options through to the docker container for memory and CPU (see <https://docs.docker.com/compose/compose-file/#cpu-shares-cpu-quota-cpuset-domainname-hostname-ipc-mac-address-mem-limit-memswap-limit-privileged-read-only-restart-shm-size-stdin-open-tty-user-working-dir>. Kubernetes implements CPU and memory limits for pods (see <http://kubernetes.io/docs/admin/limitrange/> and resource quotas (see <http://kubernetes.io/docs/admin/resourcequota/>).
- *Allow specification file format innovation* In order to allow OpenCompose implementations and users to innovate we want to allow additional elements to be added to the file that an implementation may use to expose additional capabilities such as features not covered by open compose, new features proposed for a later revision of OpenCompose, or instructions passed to an extension model.
- *Allow the developer to express replication capabilities* A developer may wish to indicate that a container can be replicated 0 ... N times for horizontal scaling and still have the application correctly function. This should be specified.
- *Allow the developer to use OpenCompose with Windows containers*
- *Allow the developer or application delivery team to overlay additional elements* Different stages of the software development lifecycle may be handled by different people, or by the same person wearing different hats. In order to support this we should support an overlay model


