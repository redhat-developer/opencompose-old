= OpenCompose Specification

# WIP : This document is under heavy modification.

:toc:


# Introduction

This document lists and describes all elements of the proposed filespec for a standardised orchestration file format aimed at developers. It also identifies
mappings to existing orchestration platforms such as Docker Compose, Kubernetes/OpenShift and Apache Mesos Marathon.

A primary goal of OpenCompose is to be inclusive and flexible enough to work with existing platforms and future ones as well.

.File Format
|===
||Description| Value| Note

|*File name*|The name of the file created by a developer that follows this specification|<choreography.yaml>|This name is to be confirmed. We are
currently using a placeholder (choreography)
|*File Format*|The format of the file created by the developer that follows this specification|YAML|
See http://yaml.org/ for a full specification of the yaml format
|*Version*|The version of this specification.|0.1|This is currently a pre-alpha proposal and under heavy development

|===


# Element Structure


----
version: "0.1"
author:
  name: Uber Hacker
  email: developer@example.com
services:
  <service name>:
    container_name: <String>
    context: <Path>
    dockerfile: <Path>
    command: <String>
    entrypoint: <String>
    image: <String>
    extends:
      file: <Path>
      service: <Reference>
    depends_on:
      - <Service Reference>
      - <Service Reference>
    environment:
      - <Key=Value>
      - <Key=Value>
    env_file: <String>
    env_file:
       - <Path>
       - <Path>
    expose:
       - <Container>
    ports:
       - <Host:Container>
    labels:
       - <Label: Value>
    links:
       - <Reference>
       - <Reference>
    volumes:
       - <Host:Container>
    volumes_from:
       - <Service Reference>
----


# Detailed Element Specification

#### version
Version of the specification used.

This directive is mandatory.
----
version: "0.1"
----


#### author
Author of the compose file.
----
author:
  name: Uber Hacker
  email: developer@example.com
----


#### services
`services` is the main directive and is mandatory with one or more services defined.
----
version: "0.1"
services:
  web:
    ...
  db:
    ...
----


#### build
Builds a container image from given path or a context .

Either `build` or `image` directive has to exist in compose file or will result in error. If `image` directive is absent then a generated name is used for the image that gets built.
----
build: ./src

build:
  context: ./src
----


#### context
Path to  directory containing a Dockerfile or url to Git repository. `context` is used as a sub-option to build.
----
build:
  context: git://mysource/repo/project.git
----


#### dockerfile
Alternate Dockerfile used for building a container image. Dockerfile is used as sub-option to build.
----
build:
  dockerfile: Other-Dockerfile

build:
  context: ./src
  dockerfile: Other-Dockerfile
----


#### image
The image from which the container will start. Needs to be any valid image specified in repository/tag or partial image ids.

Either `build` or `image` directive has to exist in compose file or will result in error.

If the specified image is not found on the system and `build` directive is absent, then it will be pulled from image repository. If `build` directive is present, then a new iimage will be built and given the name and tags as specified by `image` directive.
----
image: awesome-micro-service:v1

image: nginx
----


#### command
Command to override the default command in the container. Optionally a list of arguments can be provided.
----
  command: python setup.py

  command:
    -python
    - setup.py
    - register
----


#### container_name
Specify a custom container name, rather than a generated default name. This name should be unique within a namespace or else will result in error.
----
container_name: app-container
----


#### depends_on
*TODO*
----
----


#### environment
List of environment variables to be set in container. Overrides values listed in `env_file`
----
environment:
  - S3_BUCKET: SOME_S3_BUCKET
  - API_KEY: XYZABCDE123
  - API_SECRET:SFZV3EYT89
  - DATABASE_URL="postgres://SOME_URL"
----


#### env_file
Add environment variables listed in the file. Variables listed in `environment` override values listed here.
----
env_file: .env

env_file:
  - ./s3_paths.env
  - /aws_keys.env
----


#### expose
*TODO*
----
----


#### extends
*TODO*
----
----


#### hostpid
Use the hostâ€™s pid namespace. Defaults to false.
----
hostpid: True
----


#### labels
Labels are annotations used to add meta data resources. Can be a list or dictionary.
----
labels:
  release: stable
  role: cache

labels:
  - production
  - rhel
----


#### net
*TODO*
----
----


#### ports
Expose ports. It can be a single port <1> or a list of exposed ports<2>. By default protocol is TCP. To specify, UDP, prepend with udp. The port should defined in the following format <protocol>:<host/service>:<container>. If no host/service port is provided then a random port will be chosen.
----
ports: tcp:3000:80 // <1>

ports:  // <2>
  - tcp:4567:80
  - udp:5000:6000
  - tcp:3308:3308

ports: upd:4000:8999

ports: 3000

ports: tcp::3000
----
<1> Single port
<2> List of ports


#### volumes
A list of paths or named volumes which will be mounted and can be shared by resources.

----
volumes:
  - datavolume: /var/data
  - staticpages: /var/www/assets
----

Volumes can optionally provide a unique `volumeId` to define a named volume. Each named volume can have `type` parameter that defines the type of volume and a `options` parameter.

----
volumes :
  volumeId:data
    type: ebs
    options:
      fsType: ext4
      imageID:fobaar
  volumeId: shared-nfs-data
    type: nfs
    options:
      server: 10.10.1.1
      path: "/"
----


#### volumes_from
*TODO*
----
----


#### entrypoint
Overrides the container's default entrypoint. Can be passed as a single entry or a list form.
----
entrypoint: /scripts/run.sh

entrypoint:
  - /bin/bash
  - -c
----



# Open Questions

. How do we allow the developer to express that services should be colocated?
Comments: Network info / Volume Sharing / links is currently used to express this in Docker compose. Everything or nothing
. How do we allow the developer express minimum capabilities required to run (e.g. disk space, memory, CPU)?
. How do we allow implementations to provide inline or separate file extensions to the descriptor, so that they can innovate and add capabilities? (ideally without breaking the descriptor)
. Handle replicas
. Portability to windows - link to resources/capabilities
. Multi-file bundle/ or overrides (CSS style)
. Specify systems availability?

